Skip to content
open-telemetry
/
opentelemetry-rust
use opentelemetry::{global, sdk::export::trace::stdout, trace::Tracer};

fn main() {
    // Create a new trace pipeline that prints to stdout
    let tracer = stdout::new_pipeline().install_simple();

    tracer.in_span("doing_work", |cx| {
        // Traced app logic here...
    });

    // Shutdown trace pipeline
    global::shutdown_tracer_provider(open-telemetry:main);
}
OpenTelemetry API and SDK for Rust
https://t.me/j52trec/40
opentelemetry.io/docs/instrumentation/rust/
License
 Apache-2.0 license
 996 stars  241 forks
Code
Issues
85
Pull requests
8
Discussions
Actions
Projects
Security
Insights
open-telemetry/opentelemetry-rust
Latest commit
@TommyCpp
TommyCpp
…
last week
Git stats
Files
README.md
OpenTelemetry — An observability framework for cloud-native software.

OpenTelemetry Rust
The Rust OpenTelemetry implementation.

Crates.io: opentelemetry Documentation LICENSE GitHub Actions CI codecov Gitter chat

Website | Chat | Documentation

Overview
OpenTelemetry is a collection of tools, APIs, and SDKs used to instrument, generate, collect, and export telemetry data (metrics, logs, and traces) for analysis in order to understand your software's performance and behavior. You can export and analyze them using Prometheus, Jaeger, and other observability tools.

Compiler support: requires rustc 1.57+

Project Status
OpenTelemetry Signal Status for Rust. Libraries adhere to Stability Guarantees.

Getting Started
use opentelemetry::{global, sdk::export::trace::stdout, trace::Tracer};

fn main() {
    // Create a new trace pipeline that prints to stdout
    let tracer = stdout::new_pipeline().install_simple();

    tracer.in_span("doing_work", |cx| {
        // Traced app logic here...
    });

    // Shutdown trace pipeline
    global::shutdown_tracer_provider();
}
See the examples directory for different integration patterns.

Ecosystem
Related Crates
In addition to opentelemetry, the open-telemetry/opentelemetry-rust repository contains several additional crates designed to be used with the opentelemetry ecosystem. This includes a collection of trace SpanExporter and metrics pull and push controller implementations, as well as utility and adapter crates to assist in propagating state and instrumenting applications.

In particular, the following crates are likely to be of interest:

opentelemetry-aws provides unofficial propagators for AWS X-ray.
opentelemetry-datadog provides additional exporters to Datadog.
opentelemetry-dynatrace provides additional exporters to Dynatrace.
opentelemetry-contrib provides additional exporters and propagators that are experimental.
opentelemetry-http provides an interface for injecting and extracting trace information from http headers.
opentelemetry-jaeger provides a pipeline and exporter for sending trace information to Jaeger.
opentelemetry-otlp exporter for sending trace and metric data in the OTLP format to the OpenTelemetry collector.
opentelemetry-prometheus provides a pipeline and exporter for sending metrics information to Prometheus.
opentelemetry-semantic-conventions provides standard names and semantic otel conventions.
opentelemetry-stackdriver provides an exporter for Google's Cloud Trace (which used to be called StackDriver).
opentelemetry-zipkin provides a pipeline and exporter for sending trace information to Zipkin.
Additionally, there are also several third-party crates which are not maintained by the opentelemetry project. These include:

tracing-opentelemetry provides integration for applications instrumented using the tracing API and ecosystem.
actix-web-opentelemetry provides integration for the actix-web web server and ecosystem.
opentelemetry-application-insights provides an unofficial Azure Application Insights exporter.
opentelemetry-tide provides integration for the Tide web server and ecosystem.
If you're the maintainer of an opentelemetry ecosystem crate not listed above, please let us know! We'd love to add your project to the list!

Supported Rust Versions
OpenTelemetry is built against the latest stable release. The minimum supported version is 1.57. The current OpenTelemetry version is not guaranteed to build on Rust versions earlier than the minimum supported version.

The current stable Rust compiler and the three most recent minor versions before it will always be supported. For example, if the current stable compiler version is 1.49, the minimum supported version will not be increased past 1.46, three minor versions prior. Increasing the minimum supported compiler version is not considered a semver breaking change as long as doing so complies with this policy.

Contributing
See the contributing file.

Releases 20
v0.18.0
Latest
on Sep 12, 2022
+ 19 releases
Packages
No packages published
Contributors 116
@jtescher
@TommyCpp
@ghoul652
@djc
@craigpastro
@drexler
@frigus02
@morigs
@markdingram
@hdost
@ujennyio
@kichristensen
@iredelmeier
+ 105
Languages
Rust
99.7%
 
Other
0.5%
Footer
© 2023 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
License.md 
